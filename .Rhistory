library(Rngsutils)
require(devtools)
install.packages('devtools')
install.packages("devtools")
require(devtools)
install_github(repo = 'ngsutils', username = 'sahilseth')
>
?
>
ls
ls()
require(knitr)
knit("README.Rmd", output = "README.md")
```{r, eval=FALSE, echo=FALSE}
source('~/.active-rstudio-document', echo=TRUE)
require(knitr)
knit("README.Rmd", output = "README.md")
knit("README.Rmd", output = "README.md")
knit("README.Rmd", output = "README.md")
knit("README.Rmd", output = "README.md")
bwa()@cmds
## A class that contains bam file information
## Copyright 2014, Sahil Seth, all rights reserved
## sahil.seth@me.com
## A few functions to supplement those already in this package.
#### -----------------------
require(flow)
setClass("bwa", contains = "job",
representation(fastq1 = "character", ## submit job
fastq2 = "character", ## type of queue
paired_end = "logical",
bwa_exe = "character",
bwa_command = "character",
bwa_ref = "character",
bwa_opt = "character"
)) ## address of head node
## this should accept all the commands and create a command string for job_cmd
bwa <- function(fastq1 = '', fastq2 = '', bwa_exe = 'bwa', bwa_command = c("mem", "aln_sam"), paired_end = TRUE, bwa_opt='',
bwa_ref = '',...){
## other arguments passed on to job class
bwa_command <- match.arg(bwa_command)
if(bwa_command == "mem" & paired_end){
cmds <- sprintf("%s mem %s %s %s %s",
bwa_exe, bwa_opt, bwa_ref, fastq1, fastq2)
}else if(bwa_command == "mem" & !paired_end){
cmds <- sprintf("%s mem %s %s",
bwa_exe, bwa_opt, bwa_ref, fastq1)
}
object <- new("bwa", bwa_command=bwa_command, cmds=cmds, name = "bwa", ...)
return(object)
}
bwa()@cmds
#cmd_aln1 <- paste(bwapath, "/bwa aln ",bwa_aln_opts," ",reflib," ",fqs1,sep = "")
library(ngsflows)
library(ngsflows)
library(ngsflows)
library(ngsflows)
create_sample_mat
?create_sample_mat
document()
require(devtools)
document()
install.packages("roxygen2")
getwd()
document()
?create_sample_mat
library(ngsflows)
library(ngsflows)
?create_sample_mat
library(ngsflows)
?create_sample_sheet
library(ngsflows)
library(ngsflows)
?create_sample_sheet
library(ngsflows)
library(ngsflows)
require(mypack)
reload('roxygen2')
bam_preprocess
roxygen2:::generate_template('bam_preprocess')
source('/DRIVES/Dropbox2/Dropbox/public/github_ngsflows/R/flow_bam_preprocess.R', echo=TRUE)
roxygen2:::generate_template('bam_preprocess')
library(ngsflows)
library(ngsflows)
library(ngsflows)
reload('ngsflows')
reload('ngsflows')
library(ngsflows)
library(ngsflows)
library(ngsflows)
outfile="hello"
dirname(outfile)
library(ngsflows)
library(ngsflows)
library(ngsflows)
?.onAttach
library(ngsflows)
roxygen:::generate_template
roxygens:::generate_template
roxygen2:::generate_template
roxygen2:::generate_template("read_sample_sheet")
source('/DRIVES/Dropbox2/Dropbox/public/github_ngsflows/R/sheets_fastqs.R', echo=TRUE)
source('/DRIVES/Dropbox2/Dropbox/public/github_ngsflows/R/sheets_fastqs.R', echo=TRUE)
roxygen2:::generate_template("read_sample_sheet")
library(ngsflows)
library(ngsflows)
roxygen2:::generate_template("read_paired_samplesheet")
source('/DRIVES/Dropbox2/Dropbox/public/github_ngsflows/R/sheets_paired.R', echo=TRUE)
roxygen2:::generate_template("read_paired_samplesheet")
x="read_paired_samplesheet"
head <- sprintf("#' @title %s\n#' @description %s",x,x)
params <- paste("#' @param",names(formals(x)), collapse="\n")
tail <- sprintf("#' @export")
cat(head, "\n", params, "\n", tail)
head <- sprintf("#' @title %s\n#' @description %s",x,x)
params <- paste("#' @param",names(formals(x)), collapse="\n")
tail <- sprintf("#' @export")
template <- paste(head, params, tail, sep="\n")
cat(template)
source('/DRIVES/Dropbox2/Dropbox/public/roxygen/R/utils.R', echo=TRUE)
roxygen2:::generate_template("read_paired_samplesheet")
generate_template("read_paired_samplesheet")
tmp <- generate_template("read_paired_samplesheet")
tmp <- generate_template("create_tooling_paired_samplesheet")
tmp <- generate_template("create_paired_samplesheet")
library(ngsflows)
